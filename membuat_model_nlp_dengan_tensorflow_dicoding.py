# -*- coding: utf-8 -*-
"""Membuat Model NLP dengan TensorFlow - Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FmjhExRaV0nNDTsYl0xz08fJ00YSMsBm

# Author
## Lingga Rohadyan
Dicoding Belajar Pengembangan Machine Learning

Proyek Pertama : Membuat Model NLP dengan TensorFlow
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf

dataset1 = pd.read_csv('/content/1429_1.csv', engine='python', error_bad_lines=False)
dataset2 = pd.read_csv('/content/Datafiniti_Amazon_Consumer_Reviews_of_Amazon_Products.csv', engine='python', error_bad_lines=False)
dataset3 = pd.read_csv('/content/Datafiniti_Amazon_Consumer_Reviews_of_Amazon_Products_May19.csv', engine='python', error_bad_lines=False)

df = pd.concat([dataset1, dataset2, dataset3])

df.info()

df.isnull().sum()

df['reviews.rating'] = df['reviews.rating'].fillna('Missing')
df['reviews.text'] = df['reviews.text'].fillna('Missing')

df.isnull().sum()

df.info()

reviews=pd.concat([df['reviews.text'],df['reviews.rating']], axis=1)
reviews.head()

reviews.info()

reviews['reviews.rating'].value_counts()

new_review = reviews[reviews['reviews.rating'] != 'http://reviews.bestbuy.com/3545/5620406/reviews.htm?format=embedded&page=36,http://reviews.bestbuy.com/3545/5620406/reviews.htm?format=embedded&page=69,http://reviews.bestbuy.com/3545/5538501/reviews.htm?format=embedded&page=100,http://reviews.bestbuy.com/3545/5538501/reviews.htm?format=embedded&page=34,http://reviews.bestbuy.com/3545/5538501/reviews.htm?format=embedded&page=69']
new_review

new_review['reviews.rating'].value_counts()

review = new_review.replace({5.0 : 5, 4.0 : 4, 3.0 : 3, 2.0 : 2, 1.0 : 1, '5' : 5, '4' : 4, '3' : 3, '2' : 2, '1' : 1})

review

review['reviews.rating'].value_counts()

sns.countplot(data = review, x = 'reviews.rating')
plt.show()

plt.figure(figsize = (10, 10))
label=[5,4,3,2,1,'Missing']
plt.pie(review['reviews.rating'].value_counts(), autopct='%0.2f%%')
plt.legend(label, ncol=6, loc=9)
plt.title('Diagram Rating', size=14, y=-0.01)
plt.show()

labels = {'Missing' : 'Missing',
          1: 0,
          2: 0,
          3: 1,
          4: 2,
          5: 2}

review['reviews.rating'] = review['reviews.rating'].map(labels)
review['reviews.text'] = review['reviews.text'].map(str)

#removing missing
review = review[review['reviews.rating'] != 'Missing']

r_text = review['reviews.text']
label = review['reviews.rating'].astype(int)

r_text

label

from sklearn.model_selection import train_test_split
review_latih, review_test, label_latih, label_test = train_test_split(r_text, label, test_size=0.2)

from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(review_latih) 
tokenizer.fit_on_texts(review_test)

sekuens_latih = tokenizer.texts_to_sequences(review_latih)
sekuens_test = tokenizer.texts_to_sequences(review_test)

padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
])
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95):
      print("\nAkurasi telah mencapai >95%!")
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 30
history = model.fit(padded_latih, label_latih, epochs=num_epochs, batch_size=512, validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

test_loss, test_acc = model.evaluate(padded_test, label_test)

print('Test Loss:', test_loss)
print('Test Accuracy:', test_acc)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()